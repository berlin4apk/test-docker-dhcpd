name: Build Docker images

on:
  push:
  #  branches: [ master ]
  workflow_dispatch:
    inputs:
      clear-docker-cache:
        description: 'clear docker cache with rm -fr /tmp/.buildx-cache /tmp/.buildx-cache-old /tmp/.buildx-cache-new'     
        required: false 
        type: boolean
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-secrets
# https://docs.github.com/en/actions/security-guides/automatic-token-authentication
permissions:
  packages: read
  contents: read

jobs:
  build:
  ###  needs: container-job
    runs-on: ${{ matrix.host-os }}
  ###  continue-on-error: ${{ matrix.experimental }}
    # see https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
    # https://github.com/apache/commons-io/blob/5911ca64d08c110bc7a612dbef2f278d5dd2a9ab/.github/workflows/maven.yml#L23
    strategy:
      fail-fast: true
      matrix:
        platform-args:
          - "linux/amd64"
#          - "linux/amd64/v2"
#          - "linux/amd64/v3"
#          - "linux/amd64/v4"
###          - "linux/arm64"
###          - "linux/riscv64"
###          - "linux/ppc64le"
###          - "linux/s390x"
#          - "linux/386"
#          - "linux/mips64le"
#          - "linux/mips64"
###          - "linux/arm/v7"
#          - "linux/arm/v6"
          #linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/amd64/v4,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6
          #- linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/amd64/v4,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6
          #- "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64"
        host-os:
          #- ubuntu-18.04
          - ubuntu-20.04
        release:
          - false
        tag-args:
          - "null"
        tag-latest: [FALSE]
        tag-args-enable: [FALSE]
        tag-args-disable: [TRUE]
        # tag-args-enable: 
        #  - false
        experimental: [true]
        build-args:
          - "BASE_IMAGE=ubuntu:20.04"
          #- "BASE_IMAGE=debian:11.2-slim"
        #"BASE_IMAGE=alpine:edge"
        #"BASE_IMAGE=localhost:5000/my-project/base"
        include:
          - platform-args: "linux/arm64,linux/arm/v7,linux/arm/v5"
            host-os: ubuntu-20.04
            #host-os: ubuntu-latest
            tag-args: debian-
            tag-latest: false
            tag-args-enable: true
            tag-args-disable: false
            build-args: 'BASE_IMAGE=debian:11.2-slim'
            #release: false
            #release: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
            release: true
            experimental: true
          #- platform-args: linux/riscv64
          - platform-args: "linux/amd64,linux/arm/v5,linux/arm/v7,linux/arm64,linux/386,linux/mips64le,linux/ppc64le,linux/riscv64,linux/s390x"
            #host-os: ubuntu-latest
            host-os: ubuntu-20.04
            tag-args: debian-unstable-
            tag-latest: false
            tag-args-enable: true
            tag-args-disable: false
            #build-args: 'BASE_IMAGE=debian:unstable-20220527-slim'
            build-args: 'BASE_IMAGE=debian:unstable-slim'
            #release: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
            release: true
            experimental: true
          #- platform-args: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64"
          # no linux/mips64 support
          - platform-args: "linux/amd64,linux/arm/v5,linux/arm/v7,linux/arm64,linux/386,linux/mips64le,linux/ppc64le,linux/s390x"
            host-os: ubuntu-latest
            tag-args: debian-
            tag-latest: false
            tag-args-enable: true
            tag-args-disable: false
            build-args: 'BASE_IMAGE=debian:11.2-slim'
            #release: true
            #release: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
            release: true
            experimental: true
          - platform-args: "linux/amd64,linux/arm/v7,linux/arm64,linux/ppc64le,linux/riscv64,linux/s390x"
            host-os: ubuntu-20.04
            tag-args: ''
            tag-latest: true
            tag-args-enable: false
            tag-args-disable: false
            build-args: 'BASE_IMAGE=ubuntu:20.04'
            #release: false
            #release: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
            release: true
            experimental: true
    permissions:
      packages: write
      contents: read
    steps:
    
#######################################################
      -
        name: Print if matrix.tag-args-disable 'true'
# Use equality operators to get a boolean result; in this case we are only running the step when the greeting is “Hello”. Note the use of single quotes for the string literal. You can use ==, !=, <, <=, >, >=, &&, ||, and ( ... ). Learn more about operators here
        if: ${{ matrix.tag-args-disable == 'true' }}
        run: echo "matrix.tag-args-disable is true"

      -
        name: Print if matrix.tag-args-disable starts with 'tr'
        if: ${{ startsWith(matrix.tag-args-disable, 'tr') }}
        run: echo "matrix.tag-args-disable starts with tr"	

      -
        name: Print if matrix.tag-args-disable ends with 'e'
        if: ${{ endsWith(matrix.tag-args-disable, 'e') }}
        run: echo "matrix.tag-args-disable ends with e"          

      -
        name: Print if matrix.tag-args-disable contains 'ru'
        if: ${{ contains(matrix.tag-args-disable, 'ru') }}
        run: echo "matrix.tag-args-disable contains ru"

      -
        name: Print formatted matrix.tag-args-disable
        run: |
          echo "${{ format('{0} says {1}', github.actor, matrix.tag-args-disable) }}"

      -
        name: Print if matrix.tag-args-enable 'true'
# Use equality operators to get a boolean result; in this case we are only running the step when the greeting is “Hello”. Note the use of single quotes for the string literal. You can use ==, !=, <, <=, >, >=, &&, ||, and ( ... ). Learn more about operators here
        if: ${{ matrix.tag-args-enable == 'true' }}
        run: echo "matrix.tag-args-enable is true"

      -
        name: Print if matrix.tag-args-enable starts with 'tr'
        if: ${{ startsWith(matrix.tag-args-enable, 'tr') }}
        run: echo "matrix.tag-args-enable starts with tr"	

      -
        name: Print if matrix.tag-args-enable ends with 'e'
        if: ${{ endsWith(matrix.tag-args-enable, 'e') }}
        run: echo "matrix.tag-args-enable ends with e"    

      -
        name: Print if matrix.tag-args-enable contains 'ru'
        if: ${{ contains(matrix.tag-args-enable, 'ru') }}
        run: echo "matrix.tag-args-enable contains ru"

      -
        name: Print formatted matrix.tag-args-enable
        run: |
          echo "${{ format('{0} says {1}', github.actor, matrix.tag-args-enable) }}"

#######################################################
    
      - name: Checkout Repository
        uses: actions/checkout@v3.0.2

      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2.0.0
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.0.0
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - name: Available platforms
        run: |
          echo "${{ steps.buildx.outputs.platforms }}"
          echo "${{ steps.buildx.outputs.platforms }}" | sed -e 's/^/          - \"/' -e 's/,/\"\n          - \"/g' -e 's/$/\"/'
  
      # https://github.com/actions/cache#creating-a-cache-key
      # http://man7.org/linux/man-pages/man1/date.1.html
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - name: Generate hash of matrix.platform-args AND matrix.build-args
        shell: bash
        env:
          MATRIX_TAG_ARGS_ENABLE: ${{matrix.tag-args-enable}}
          MATRIX_TAG_ARGS_DISABLE: ${{matrix.tag-args-disable}}
        run: |
          set -vx
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#echoing-command-outputs
          echo '::echo::on'
          echo "[debug] github.sha is '${{ github.sha }}'"
          short_sha=$(echo "${{ github.sha }}" | cut -c1-8 )
          echo "[debug] Generated short_sha is '${short_sha}'"
          echo "::set-output name=short_sha::$short_sha"
          #
          echo "[debug] matrix.platform-args is '${{ matrix.platform-args }}'"
          ### hash=$(echo "${{ matrix.platform-args }}" | sed -e 's/[;, ]/\n/g' | sort -u | md5sum | cut -c1-15 )
          hash=$(echo "${{ matrix.platform-args }}" | sed -e 's/[;, ]/\n/g' | sort -u | sha1sum | cut -c1-8 )
          echo "[debug] Generated hash is '${hash}'"
          echo "::set-output name=hash::$hash"
          #
          echo "[debug] matrix.platform-args is '${{ matrix.platform-args }}'"
          ### hash=$(echo "${{ matrix.platform-args }}" | sed -e 's/[;, ]/\n/g' | sort -u | md5sum | cut -c1-15 )
          pavar=$(echo "${{ matrix.platform-args }}" | sed -e 's/[;, ]/\n/g' | sort -u | sed -e 's/^.*linux\//.L/g' -e 's/^.*windows\//.W/g' -e 's/^.*darwin\//.D/g' | tr -d '\n' | sed -e 's/[^0-9,a-z,A-Z,.]*//g' )
          echo "[debug] Generated pavar is '${pavar}'"
          echo "::set-output name=pavar::$pavar"
          #
          echo "[debug] matrix.build-args is '${{ matrix.build-args }}'"
          ### bahash=$(echo "${{ matrix.build-args }}" | sed -e 's/[;, ]/\n/g' | sort -u | md5sum | cut -c1-15 )
          bahash=$(echo "${{ matrix.build-args }}" | sed -e 's/[;, ]/\n/g' | sort -u | sha1sum | cut -c1-8 )
          echo "[debug] Generated bahash is '${bahash}'"
          echo "::set-output name=bahash::$bahash"
          #
          echo "[debug] matrix.build-args is '${{ matrix.build-args }}'"
          bavar=$(echo "${{ matrix.build-args }}" | sed -e 's/[;, ]/\n/g' | sort -u | sed -e 's/^.*=/./g' | tr -d '\n' | sed -e 's/[^0-9,a-z,A-Z,.]*//g' )
          echo "[debug] Generated bavar is '${bavar}'"
          echo "::set-output name=bavar::$bavar"
          #
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
          echo "::set-output name=fulldate::$(/bin/date -u "+%Y%m%dT%H%M%S")"
          #${{ steps.generate_matrix_platform-args.outputs.hash }}
          echo "::set-output name=matrix-tag-args-enable::$(echo "${{ matrix.tag-args-enable && matrix.tag-args-enable != 'false' }}" )"
          echo "::set-output name=matrix-tag-args-enable2::$(echo "${{fromJSON(matrix.tag-args-enable)}}" )"
          echo "::set-output name=matrix-tag-args-enable3::$(echo "${{format('{0}', matrix.tag-args-enable)}}" )"
          echo "::set-output name=matrix-tag-args-enable4::$(echo "${{format('{0}', matrix.tag-args-enable) != 'false'}}" )"
          echo "::set-output name=matrix-tag-args-enable5::$(echo "${{ fromJSON(env.MATRIX_TAG_ARGS_ENABLE) }}" )"
          echo "::set-output name=matrix-tag-args-disable::$(echo "${{ matrix.tag-args-disable && matrix.tag-args-disable != 'false' }}" )"
          echo "::set-output name=matrix-tag-args-disable2::$(echo "${{fromJSON(matrix.tag-args-disable)}}" )"
          echo "::set-output name=matrix-tag-args-disable3::$(echo "${{format('{0}', matrix.tag-args-disable)}}" )"
          echo "::set-output name=matrix-tag-args-disable4::$(echo "${{format('{0}', matrix.tag-args-disable) != 'false'}}" )"
          echo "::set-output name=matrix-tag-args-disable5::$(echo "${{ fromJSON(env.MATRIX_TAG_ARGS_DISABLE) }}" )"
          echo '::echo::off'
        id: generate_matrix_platform-args
    
      - name: Cache Docker layers
        id: buildx-cache
        uses: actions/cache@v3.0.4
        with:
          path: /tmp/.buildx-cache
          # key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.run_id }}
          # ${{ hashFiles('**/go.sum') }}-
          # key: ${{ runner.os }}-buildx-HASH${{ steps.generate_matrix_platform-args.outputs.hash }}-CV${{ inputs.cache-version }}-SHA${{ github.sha }}-RUN${{ github.run_id }}-DATE${{ steps.generate_matrix_platform-args.outputs.fulldate }}
          # key: ${{ runner.os }}-buildx-PAHASH${{ steps.generate_matrix_platform-args.outputs.hash }}-BA${{ steps.generate_matrix_platform-args.outputs.bavar }}-SHA${{ steps.generate_matrix_platform-args.outputs.short_sha }}-RUN${{ github.run_id }}-
          key: ${{ runner.os }}-buildx-BA${{ steps.generate_matrix_platform-args.outputs.bavar }}-PA${{ steps.generate_matrix_platform-args.outputs.pavar }}-SHA${{ steps.generate_matrix_platform-args.outputs.short_sha }}-RUN${{ github.run_id }}-
          # key: ${{ runner.os }}-buildx-BA${{ steps.generate_matrix_platform-args.outputs.bavar }}-PA${{ steps.generate_matrix_platform-args.outputs.pavar }}-SHA${{ steps.generate_matrix_platform-args.outputs.short_sha }}-
          restore-keys: |
            # ${{ runner.os }}-buildx-HASH${{ steps.generate_matrix_platform-args.outputs.hash }}-CV${{ inputs.cache-version }}-SHA${{ github.sha }}-RUN${{ github.run_id }}-DATE${{ steps.generate_matrix_platform-args.outputs.fulldate }}
            # ${{ runner.os }}-buildx-PAHASH${{ steps.generate_matrix_platform-args.outputs.hash }}-BA${{ steps.generate_matrix_platform-args.outputs.bavar }}-SHA${{ steps.generate_matrix_platform-args.outputs.short_sha }}-RUN${{ github.run_id }}-
            ${{ runner.os }}-buildx-BA${{ steps.generate_matrix_platform-args.outputs.bavar }}-PA${{ steps.generate_matrix_platform-args.outputs.pavar }}-SHA${{ steps.generate_matrix_platform-args.outputs.short_sha }}-RUN${{ github.run_id }}-
            ${{ runner.os }}-buildx-BA${{ steps.generate_matrix_platform-args.outputs.bavar }}-PA${{ steps.generate_matrix_platform-args.outputs.pavar }}-SHA${{ steps.generate_matrix_platform-args.outputs.short_sha }}-
            ${{ runner.os }}-buildx-BA${{ steps.generate_matrix_platform-args.outputs.bavar }}-PA${{ steps.generate_matrix_platform-args.outputs.pavar }}-
            ${{ runner.os }}-buildx-BA${{ steps.generate_matrix_platform-args.outputs.bavar }}-
            # ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.run_id }}
            # ${{ runner.os }}-buildx-${{ github.sha }}-
            # ${{ runner.os }}-buildx-

      # START workaround for --cache-from fails if cache does not already exist
      - name: remove Docker cache
        if: ${{ github.event.inputs.clear-docker-cache }}
        run: rm -fr /tmp/.buildx-cache /tmp/.buildx-cache-old /tmp/.buildx-cache-new
      - name: Docker cache Fix 1/2
      # see
      # https://github.com/actions/cache/issues/485
      # https://github.com/shivammathur/cache-extensions/issues/22
      # see https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/10365/files#diff-bc668a2c9f2299cef15b222055b4b4d5311646caec2e7610e540cee18ae9b948
        ##if: steps.buildx-cache.outputs.cache-hit != 'true'
        ##run: echo "START Docker cache Fix" || echo "FROM scratch" | docker buildx build - --cache-to type=local,dest=/tmp/.buildx-cache,mode=max
        #run: |
        #  [[ -f /tmp/.buildx-cache/index.json ]] || $( echo 'START Docker cache Fix' ; echo "FROM scratch" | docker buildx build - --cache-to type=local,dest=/tmp/.buildx-cache,mode=max ; ) ;
        #run: |
        #  [[ -f /tmp/.buildx-cache/index.json ]] && echo "Skip run of Docker cache Fix" || echo "FROM alpine" | docker buildx build - --cache-to type=local,dest=/tmp/.buildx-cache,mode=max
        run: |
          [ -f /tmp/.buildx-cache/index.json ] || printf "FROM scratch\n" | docker buildx build - --cache-to type=local,dest=/tmp/.buildx-cache,mode=max
        shell: bash          
      - name: hash matrix.platform-args
        run: |
          echo ${{ matrix.platform-args }}
          echo ${{ matrix.platform-args }} | sed -e 's/[;,]/\n/g' | sort -u > /tmp/.buildx-cache/matrixplatformargs
          sha1sum /tmp/.buildx-cache/matrixplatformargs
          cat /tmp/.buildx-cache/matrixplatformargs
      # Temp fix1
      #    https://github.com/docker/buildx/issues/206
#      - name: cache Fix, if cache does not already exist, create Dockerfile.dummy
#        run: echo "FROM alpine" > Dockerfile.dummy
#      - uses: docker/build-push-action@v2
#        with:
#          context: .
#          file: Dockerfile.dummy
#          platforms: |
#            linux/amd64
#          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
#      - name: cache Fix, Move cache
#        run: |
#          set -vx
#          # delete cache dir if index.json not exist
#          #[[ -f /tmp/.buildx-cache/index.json ]] || rm -rf /tmp/.buildx-cache
#          # move dummy docker cache over if index.json not exist
#          [[ -f /tmp/.buildx-cache/index.json ]] || mv /tmp/.buildx-cache-new /tmp/.buildx-cache
#      # END workaround for --cache-from fails if cache does not already exist


#      - name: meta docker/metadata-action
#        uses: docker/metadata-action@v4.0.1
#        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepscontinue-on-error
#        # continue-on-error: true
#        ## id: meta
#        id: meta-disabel
#        with:
#          images: |
#            name=ghcr.io/${{ github.repository }}
#            name=${{ github.repository }}
#          flavor: |
#            latest=${{ matrix.tag-latest }}
#          tags: |
#            type=sha,prefix=def{{branch}}-
#            type=sha,enable=${{ matrix.tag-args-enable }},prefix=${{ matrix.tag-args }}-{{branch}}-

#      - name: meta2 docker/metadata-action
#        uses: docker/metadata-action@v4.0.1
#        continue-on-error: true
#        id: meta2
#        with:
#          images: |
#            name=ghcr.io/${{ github.repository }}
#            name=${{ github.repository }}
#          tags: |
#            type=sha,prefix=def{{branch}}-
#            type=sha,enable=${{ matrix.tag-args-enable && matrix.tag-args-enable != 'false' }},prefix=${{ matrix.tag-args }}-{{branch}}-

#      - name: meta3 docker/metadata-action
#        uses: docker/metadata-action@v4.0.1
#        continue-on-error: true
#        id: meta3
#        with:
#          images: |
#            name=ghcr.io/${{ github.repository }}
#            name=${{ github.repository }}
#          tags: |
#            type=sha,prefix=def{{branch}}-
#            type=sha,enable=${{fromJSON(matrix.tag-args-enable)}},prefix=${{ matrix.tag-args }}-{{branch}}-

#      - name: meta4 docker/metadata-action
#        uses: docker/metadata-action@v4.0.1
#        continue-on-error: true
#        id: meta4
#        with:
#          images: |
#            name=ghcr.io/${{ github.repository }}
#            name=${{ github.repository }}
#          tags: |
#            type=sha,prefix=def{{branch}}-
#            type=sha,enable=${{format('{0}', matrix.tag-args-enable)}},prefix=${{ matrix.tag-args }}-{{branch}}-


#      - name: meta5 docker/metadata-action
#        uses: docker/metadata-action@v4.0.1
#        continue-on-error: true
#        id: meta5
#        with:
#          images: |
#            name=ghcr.io/${{ github.repository }}
#            name=${{ github.repository }}
#          tags: |
#            type=sha,prefix={{branch}}-
#            type=sha,enable=${{format('{0}', matrix.tag-args-enable) != 'false'}},prefix=${{ matrix.tag-args }}-{{branch}}-


      - name: meta6 docker/metadata-action
        uses: docker/metadata-action@v4.0.1
        # continue-on-error: true
        ## id: meta6-disabel
        id: meta
        with:
          images: |
            name=ghcr.io/${{ github.repository }}
            name=${{ github.repository }}
          #flavor: |
          #  latest=${{ matrix.tag-latest }}
          #  ${{ matrix.tag-args }}
          flavor: |
            latest=${{ matrix.tag-latest }}
            prefix=${{ matrix.tag-args }}
            suffix=
          # latest=<auto|true|false>: Handle latest tag (default auto)
          # prefix=<string>,onlatest=<true|false>: A global prefix for each generated tag and optionally for latest
          # suffix=<string>,onlatest=<true|false>: A global suffix for each generated tag and optionally for latest
          tags: |
            type=schedule,pattern=nightly
            # handlebars
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=${{ matrix.tag-args }}sha-,suffix=,format=short

      - name: Login to GitHub
        if: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: ${{ github.event_name != 'pull_request' }} # importent to catch a rogue like PR
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker cache Fix 2/2
        #if: ${{ steps.buildx-cache.outputs.cache-hit }}
        run: mv /tmp/.buildx-cache /tmp/.buildx-cache-old

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3.0.0
        with:
          platforms: ${{ matrix.platform-args }}
          #"linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64"
          #linux/amd64,linux/arm/v7,linux/arm64
          #push: ${{ matrix.release }}
          push: ${{ matrix.release && github.event_name != 'pull_request' }} # importent to catch a rogue like PR
          #push: ${{ ( matrix.release && ( github.event_name != 'pull_request' ) ) }} # importent to catch a rogue like PR
          #push: ${{ github.event_name != 'pull_request' }}  # importent to catch a rogue like PR
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          #cache-from: type=local,src=/tmp/.buildx-cache
          cache-from: type=local,src=/tmp/.buildx-cache-old
          #cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: ${{ matrix.build-args }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
